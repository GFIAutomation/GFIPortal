@model gfi_test_landing.Models.Chart
@{
    ViewBag.Title = "Dashboard";
}

<h2>Dashboard</h2>

<!doctype html>

<html class="no-js" lang="">

<body>

    <div class="row">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="mb-3">Tests Browsers Amount </h4>
                    <div id="donut_single" class="chart-wrapper">
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="mb-3">Builds</h4>
                    <div id="bar" class="chart-wrapper">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="mb-3">Last 5 Builds</h4>
                    <div id="dbar" class="chart-wrapper">
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h4 class="mb-3">Last 4 Builds</h4>
                    <div id="dbar2" class="chart-wrapper">
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="mb-3">Passed and Failed builds %</h4>
                    <div id="buildsPassAndFail" class="chart-wrapper">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="mb-3">Running</h4>
                    <div id="example" class="chart-wrapper">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(drawChart);
            google.charts.setOnLoadCallback(Bars);
            google.charts.setOnLoadCallback(dBars);
            google.charts.setOnLoadCallback(dBars2);
            google.charts.setOnLoadCallback(buildsPassAndFail);
            google.charts.setOnLoadCallback(run);

            function drawChart() {
                var data = google.visualization.arrayToDataTable([
                    ['Brand', 'Count'],
                    ['Google Chrome', @Model.Chrome],
                    ['Firefox', @Model.Firefox],
                    ['Opera', @Model.Opera],
                    ['Internet Explorer', @Model.IE],
                    ['Edge', @Model.Edge],
                    ['Safari', @Model.Safari],
                ]);

                var options = {
                    pieHole: 0.3,
                    pieSliceTextStyle: {
                        color: 'black',
                    },
                    legend: 'yes',
                    chartArea: { width: 600, height: 500 }
                };

                var chart = new google.visualization.PieChart(document.getElementById('donut_single'));
                chart.draw(data, options);
            }

            function buildsPassAndFail() {
                var data = google.visualization.arrayToDataTable([
                    ['Status', 'Quantity', { role: "style" }],
                    ['Passed', @Model.PassedTests, "green"],
                    ['Failed', @Model.FailedTests, "red"],
                ]);

                var options = {
                    legend: 'yes',
                    chartArea: { width: 600, height: 500 },
                };

                var chart = new google.visualization.PieChart(document.getElementById('buildsPassAndFail'));
                chart.draw(data, options);
            }

            function dBars() {
                var data = google.visualization.arrayToDataTable([
                    [  'Tests/Build', 'Passed', 'Failed', { role: 'annotation' }],

                    ['@Model.DateList[0]', @Model.LastFiveBuildsPass[0], @Model.LastFiveBuildsFail[0], ''],
                    ['@Model.DateList[1]', @Model.LastFiveBuildsPass[1], @Model.LastFiveBuildsFail[1], ''],
                    ['@Model.DateList[2]', @Model.LastFiveBuildsPass[2], @Model.LastFiveBuildsFail[2], ''],
                    ['@Model.DateList[3]', @Model.LastFiveBuildsPass[3], @Model.LastFiveBuildsFail[3], ''],
                    ['@Model.DateList[4]', @Model.LastFiveBuildsPass[4], @Model.LastFiveBuildsFail[4], ''],
                ]);


                var options = {
                    legend: { position: 'top', maxLines: 3 },
                    bar: { groupWidth: '75%' },
                    isStacked: true,
                }; var chart = new google.visualization.ColumnChart(document.getElementById('dbar'));


                function selectHandler() {
                    var selectedItem = chart.getSelection()[0];
                    if (selectedItem) {
                        var topping = data.getValue(selectedItem.row, 0);
                        alert('The user selected ' + topping);
                    }
                }

                google.visualization.events.addListener(chart, 'select', selectHandler);

                chart.draw(data, options);


            }

         function dBars2() {
                var data = google.visualization.arrayToDataTable([
                    ['Tests/Build', 'Passed', 'Failed', { role: 'annotation' }],
                   
                    ['@Model.DataLastFiveBuild[0].date_end',@Model.DataLastFiveBuild[0].pass_tests, (@Model.DataLastFiveBuild[0].total_tests - @Model.DataLastFiveBuild[0].pass_tests), ''],
                    ['@Model.DataLastFiveBuild[1].date_end',@Model.DataLastFiveBuild[1].pass_tests, (@Model.DataLastFiveBuild[1].total_tests - @Model.DataLastFiveBuild[1].pass_tests), ''],
                    ['@Model.DataLastFiveBuild[2].date_end',@Model.DataLastFiveBuild[2].pass_tests, (@Model.DataLastFiveBuild[2].total_tests - @Model.DataLastFiveBuild[2].pass_tests), ''],
                    ['@Model.DataLastFiveBuild[3].date_end',@Model.DataLastFiveBuild[3].pass_tests, (@Model.DataLastFiveBuild[3].total_tests - @Model.DataLastFiveBuild[3].pass_tests), ''],
                    ['@Model.DataLastFiveBuild[4].date_end',@Model.DataLastFiveBuild[4].pass_tests, (@Model.DataLastFiveBuild[4].total_tests - @Model.DataLastFiveBuild[4].pass_tests), ''],
                ]);

              
                var options = {
                    legend: { position: 'top', maxLines: 3 },
                    bar: { groupWidth: '75%' },
                    isStacked: true,
             }; var chart = new google.visualization.ColumnChart(document.getElementById('dbar2'));


                function selectHandler() {
                    var selectedItem = chart.getSelection()[0];
                    if (selectedItem) {
                        @*var i = data.row.position;
                        
                             var topping = @Model.DataLastFiveBuild[i].id;*@
                       
                       
                        alert('The user selected ' + topping);
                    }
                }

                google.visualization.events.addListener(chart, 'select', selectHandler);

                chart.draw(data, options);


            }


            function Bars() {

                var data = new google.visualization.arrayToDataTable([
                    ['Status', 'Quantity', { role: "style" }],
                    ['Passed', @Model.PassedTests, "green"],
                    ['Failed', @Model.FailedTests, "red"],
                ]);

                var view = new google.visualization.DataView(data);
                view.setColumns([0, 1,
                    {
                        calc: "stringify",
                        sourceColumn: 1,
                        type: "string",
                        role: "annotation",
                        seriesType: 'bars',
                        series: { 3: { type: 'line' } }
                    },
                2]);

                var options = {
                    bar: { groupWidth: "50%" },
                    legend: { position: "none" },
                };

                var chart = new google.visualization.ColumnChart(document.getElementById('bar'));
                chart.draw(data, options);
            }

            function run() {
                var data = google.visualization.arrayToDataTable([
                    ['Status', 'Quantity', { role: "style" }],
                    ['Running', @Model.test, "green"],
                ]);

                var options = {
                    legend: 'yes',
                    chartArea: { width: 600, height: 500 },
                };

                var chart = new google.visualization.PieChart(document.getElementById('example'));
                chart.draw(data, options);
            }


            $(window).resize(function () {
                drawChart();
                Bars();
                dBars();
                buildsPassAndFail();
                run();
            });

        //$(document).ready(function () {
        //    // First load the chart once
        //    run();
        //    // Set interval to call the drawChart again
        //    setInterval(run, 2000);
        //});

    </script>

</body>
</html>
